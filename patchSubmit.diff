diff --git a/kmousetool/kmousetool.cpp b/kmousetool/kmousetool.cpp
index ead190e..b1b6fb2 100644
--- a/kmousetool/kmousetool.cpp
+++ b/kmousetool/kmousetool.cpp
@@ -19,32 +19,46 @@
  *                                                                         *
  ***************************************************************************/
 
-#include "kmousetool.h"
-#include "Xmd_kmousetool.h"
-#include "kmousetool.moc"
-#include "mtstroke.h"
-#include <kconfig.h>
+#include <X11/Xmd.h>
 #include <X11/Intrinsic.h>     /* Intrinsics Definitions*/
 #include <X11/StringDefs.h>    /* Standard Name-String definitions*/
 #include <X11/extensions/xtestext1.h>    /* Standard Name-String definitions*/
 #include <X11/extensions/XTest.h>    /* Standard Name-String definitions*/
+#include <X11/keysymdef.h>
+
+#include "mtstroke.h"
 #include <fixx11h.h>
-#include <kdialog.h>
-#include <klocale.h>
-#include <QtGui/QPushButton>
+#include <Phonon/MediaObject>
+#include <netwm.h>
+#include <iostream>
+
 #include <QtCore/QPoint>
 #include <QtCore/qnamespace.h>
+#include <QtCore/QAbstractEventDispatcher>
 #include <QtGui/QPixmap>
 #include <QtCore/QTimerEvent>
 #include <QtGui/QDesktopWidget>
-#include <kmessagebox.h>
-#include <kstandarddirs.h>
 #include <QtGui/QSound>
-#include <kglobalsettings.h>
-#include <kdebug.h>
 #include <QtGui/QLayout>
 #include <QtGui/QLineEdit>
 #include <QtGui/QCheckBox>
+#include <QApplication>
+#include <QtDBus>
+#include <QComboBox>
+#include <QStackedWidget>
+#include <QX11Info>
+#include <QtGui/QPushButton>
+
+#include <kdebug.h>
+#include "kmousetool.h"
+#include "kmousetool.moc"
+#include <kconfig.h>
+#include <kdialog.h>
+#include <klocale.h>
+#include <kmessagebox.h>
+#include <kstandarddirs.h>
+#include <kglobalsettings.h>
+#include <kdebug.h>
 #include <ksystemtrayicon.h>
 #include <kicon.h>
 #include <kiconloader.h>
@@ -53,13 +67,10 @@
 #include <knuminput.h>
 #include <kmenu.h>
 #include <kaboutapplicationdialog.h>
-#include <Phonon/MediaObject>
-#include <netwm.h>
 #include <kapplication.h>
-#include <iostream>
-#include <QtCore/QAbstractEventDispatcher>
 #include <ktoolinvocation.h>
 #include <kglobal.h>
+#include <kmodifierkeyinfo.h> //for kmodifier keys
 
 //using namespace Arts;
 
@@ -93,192 +104,201 @@ Display *display;
 
 void KMouseTool::init_vars()
 {
-	continue_timer = 1;
-	tick_count = 0;
-	max_ticks = dwell_time+1;
-	mouse_is_down = false;
+    continue_timer = 1;
+    tick_count = 0;
+    max_ticks = dwell_time + 1;
+    mouse_is_down = false;
 
-	loadOptions();
+    loadOptions();
 
-	// If the ~/.mousetool directory doesn't exist, create it
-//	mSoundFileName = QDir::homePath();
-	mSoundFileName = KStandardDirs::locate("appdata", QLatin1String( "sounds/mousetool_tap.wav" ));
-	mplayer = Phonon::createPlayer(Phonon::AccessibilityCategory);
-	mplayer->setParent(this);
+    // If the ~/.mousetool directory doesn't exist, create it
+//  mSoundFileName = QDir::homePath();
+    mSoundFileName = KStandardDirs::locate("appdata", QLatin1String("sounds/mousetool_tap.wav"));
+    mplayer = Phonon::createPlayer(Phonon::AccessibilityCategory);
+    mplayer->setParent(this);
 
-	// find application file
-	appfilename = KStandardDirs::locate("exe", QLatin1String( "kmousetool" ));
+    // find application file
+    appfilename = KStandardDirs::locate("exe", QLatin1String("kmousetool"));
 
-	// find the user's autostart directory
-	autostartdirname = KGlobalSettings::autostartPath();
+    // find the user's autostart directory
+    autostartdirname = KGlobalSettings::autostartPath();
 
-	QDesktopWidget *d = QApplication::desktop();
-	int w = d->width();
-	int h = d->height();
-	MTStroke::setUpperLeft(0,0);
-	MTStroke::setUpperRight(w-1,0);
-	MTStroke::setLowerLeft(0,h-1);
-	MTStroke::setLowerRight(w-1,h-1);
+    QDesktopWidget *d = QApplication::desktop();
+    int w = d->width();
+    int h = d->height();
+    MTStroke::setUpperLeft(0, 0);
+    MTStroke::setUpperRight(w - 1, 0);
+    MTStroke::setLowerLeft(0, h - 1);
+    MTStroke::setLowerRight(w - 1, h - 1);
 }
 
 void KMouseTool::resetSettings()
 {
-	cbDrag ->setChecked(smart_drag_on);
-	cbStart->setChecked(isAutostart());
-	cbClick->setChecked(playSound);
-	cbStroke->setChecked(strokesEnabled);
-	movementEdit->setValue(min_movement);
-	dwellTimeEdit->setValue(dwell_time);
-	dragTimeEdit->setValue(drag_time);
-	settingsChanged();
+    cbDrag ->setChecked(smart_drag_on);
+    cbStart->setChecked(isAutostart());
+    cbClick->setChecked(playSound);
+    cbStroke->setChecked(strokesEnabled);
+    movementEdit->setValue(min_movement);
+    dwellTimeEdit->setValue(dwell_time);
+    dragTimeEdit->setValue(drag_time);
+    settingsChanged();
 }
 
 void KMouseTool::setDefaultSettings()
 {
-	cbDrag ->setChecked(false);
-	cbStart->setChecked(false);
-	cbClick->setChecked(false);
-	cbStroke->setChecked(false);
-	movementEdit->setValue(5);
-	dwellTimeEdit->setValue(5);
-	dragTimeEdit->setValue(3);
-	settingsChanged();
-}
-
-
-void KMouseTool::timerEvent( QTimerEvent * )
-{
-	if (!mousetool_is_running)
-		return;
-
-	if (!continue_timer) {
-		QAbstractEventDispatcher::instance()->unregisterTimers(this);
-		return;
-	}
-
-	max_ticks = dwell_time + drag_time;
-	stroke.addPt(currentXPosition, currentYPosition);
-
-	moving = moving?CursorHasMoved(1):CursorHasMoved(min_movement);
-	if (moving) {
-		if (mousetool_just_started) {
-			mousetool_just_started = false;
-			tick_count = max_ticks;
-		}
-		else
-			tick_count = 0;
-		return;
-	}
-
-	if (tick_count<max_ticks)
-		tick_count++;
-
-
-	// If the mouse has paused ...
-	if (tick_count==dwell_time) {
-		int strokeType = stroke.getStrokeType();
-		getMouseButtons();
-
-		// if we're dragging the mouse, ignore stroke type
-		if (mouse_is_down) {
-			normalClick();
-			return;
-		}
-
-		if (!strokesEnabled) {
-			normalClick();
-			return;
-		}
-		if (strokeType == MTStroke::DontClick)
-			return;
-		if (strokeType==MTStroke::bumped_mouse)
-			return;
-
-		if (strokeType==MTStroke::RightClick || strokeType==MTStroke::UpperRightStroke)
-			RightClick();
-		else if (strokeType==MTStroke::DoubleClick || strokeType==MTStroke::LowerLeftStroke)
-			DoubleClick();
-		else
-			normalClick();
-	}
+    cbDrag ->setChecked(false);
+    cbStart->setChecked(false);
+    cbClick->setChecked(false);
+    cbStroke->setChecked(false);
+    movementEdit->setValue(5);
+    dwellTimeEdit->setValue(5);
+    dragTimeEdit->setValue(3);
+    settingsChanged();
+}
+
+
+void KMouseTool::timerEvent(QTimerEvent *)
+{
+    if (!mousetool_is_running)
+        return;
+
+    if (!continue_timer) {
+        QAbstractEventDispatcher::instance()->unregisterTimers(this);
+        return;
+    }
+
+    max_ticks = dwell_time + drag_time;
+    stroke.addPt(currentXPosition, currentYPosition);
+
+    moving = moving ? CursorHasMoved(1) : CursorHasMoved(min_movement);
+    if (moving) {
+        if (mousetool_just_started) {
+            mousetool_just_started = false;
+            tick_count = max_ticks;
+        } else
+            tick_count = 0;
+        return;
+    }
+
+    if (tick_count < max_ticks)
+        tick_count++;
+
+
+    // If the mouse has paused ...
+    if (tick_count == dwell_time) {
+        int strokeType = stroke.getStrokeType();
+        getMouseButtons();
+
+        // if we're dragging the mouse, ignore stroke type
+        if (mouse_is_down) {
+
+            if (implement() == false) {
+                normalClick();
+            } else
+                return;
+        }
+
+        if (!strokesEnabled) {
+            if (implement() == false) {
+                normalClick();
+            } else
+                return;
+        }
+        if (strokeType == MTStroke::DontClick)
+            return;
+        if (strokeType == MTStroke::bumped_mouse)
+            return;
+
+        if (strokeType == MTStroke::RightClick || strokeType == MTStroke::UpperRightStroke) {
+            if (implement() == false) {
+                RightClick();
+            }
+        } else if (strokeType == MTStroke::DoubleClick || strokeType == MTStroke::LowerLeftStroke) {
+            if (implement() == false) {
+                DoubleClick();
+            }
+        } else if (implement() == false) {
+            normalClick();
+        }
+    }
 }
 
 void KMouseTool::normalClick()
 {
-	if (smart_drag_on) {
-		if (!mouse_is_down) {
-			LeftDn();
-			mouse_is_down = true;
-			tick_count = 0;
-			playTickSound();
-		}
-		else if (mouse_is_down) {
-			LeftUp();
-			mouse_is_down = false;
-			tick_count = max_ticks;
-		}
-	}
-	else {
-		// not smart_drag_on
-		LeftClick();
-		playTickSound();
-	}
+    if (smart_drag_on) {
+        if (!mouse_is_down) {
+            LeftDn();
+            mouse_is_down = true;
+            tick_count = 0;
+            playTickSound();
+        } else if (mouse_is_down) {
+            LeftUp();
+            mouse_is_down = false;
+            tick_count = max_ticks;
+        }
+    } else {
+        // not smart_drag_on
+        LeftClick();
+        playTickSound();
+    }
 }
 
 // This function isn't happy yet.
 void KMouseTool::playTickSound()
 {
-	if (!playSound)
-	return;
+    if (!playSound)
+        return;
 
-	mplayer->setCurrentSource(mSoundFileName);
-	mplayer->play();
+    mplayer->setCurrentSource(mSoundFileName);
+    mplayer->play();
 
 }
 
 KMouseTool::KMouseTool(QWidget *parent, const char *name) :
-        QWidget(parent)
-{
-        setupUi(this);
-        setObjectName( QLatin1String( name ));
-	init_vars();
-	resetSettings();
-
-	connect(movementEdit, SIGNAL(valueChanged(int)), this, SLOT(settingsChanged()));
-	connect(dwellTimeEdit, SIGNAL(valueChanged(int)), this, SLOT(settingsChanged()));
-	connect(dragTimeEdit, SIGNAL(valueChanged(int)), this, SLOT(settingsChanged()));
-	connect(cbDrag, SIGNAL(stateChanged(int)), this, SLOT(settingsChanged()));
-	connect(cbStroke, SIGNAL(stateChanged(int)), this, SLOT(settingsChanged()));
-	connect(cbClick, SIGNAL(stateChanged(int)), this, SLOT(settingsChanged()));
-	connect(cbStart, SIGNAL(stateChanged(int)), this, SLOT(settingsChanged()));
-
-	connect(buttonStartStop, SIGNAL(clicked()), this, SLOT(startStopSelected()));
-	buttonDefault->setGuiItem(KStandardGuiItem::defaults());
-	connect(buttonDefault, SIGNAL(clicked()), this, SLOT(defaultSelected()));
-	connect(buttonReset, SIGNAL(clicked()), this, SLOT(resetSelected()));
-	buttonApply->setGuiItem(KStandardGuiItem::apply());
-	connect(buttonApply, SIGNAL(clicked()), this, SLOT(applySelected()));
-	buttonHelp->setGuiItem(KStandardGuiItem::help());
-	connect(buttonHelp, SIGNAL(clicked()), this, SLOT(helpSelected()));
-	buttonClose->setGuiItem(KStandardGuiItem::close());
-	connect(buttonClose, SIGNAL(clicked()), this, SLOT(closeSelected()));
-	buttonQuit->setGuiItem(KStandardGuiItem::quit());
-	connect(buttonQuit, SIGNAL(clicked()), this, SLOT(quitSelected()));
-
-	// When we first start, it's nice to not click immediately.
-	// So, tell MT we're just starting
-	mousetool_just_started = true;
-
-	startTimer(100);
-	trayIcon = new KMouseToolTray (this);
-	updateStartStopText ();
-	connect(trayIcon, SIGNAL(startStopSelected()), this, SLOT(startStopSelected()));
-	connect(trayIcon, SIGNAL(configureSelected()), this, SLOT(configureSelected()));
-	connect(trayIcon, SIGNAL(aboutSelected()), this, SLOT(aboutSelected()));
-	connect(trayIcon, SIGNAL(helpSelected()), this, SLOT(helpSelected()));
-	connect(trayIcon, SIGNAL(quitSelected()), this, SLOT(quitSelected()));
-
-	aboutDlg = new KAboutApplicationDialog (KGlobal::mainComponent().aboutData());
+    QWidget(parent)
+{
+    setupUi(this);
+    setObjectName(QLatin1String(name));
+    init_vars();
+    resetSettings();
+
+    connect(DisableKey, SIGNAL(activated(int)), this, SLOT(showItemIndex()));
+    connect(movementEdit, SIGNAL(valueChanged(int)), this, SLOT(settingsChanged()));
+    connect(dwellTimeEdit, SIGNAL(valueChanged(int)), this, SLOT(settingsChanged()));
+    connect(dragTimeEdit, SIGNAL(valueChanged(int)), this, SLOT(settingsChanged()));
+    connect(cbDrag, SIGNAL(stateChanged(int)), this, SLOT(settingsChanged()));
+    connect(cbStroke, SIGNAL(stateChanged(int)), this, SLOT(settingsChanged()));
+    connect(cbClick, SIGNAL(stateChanged(int)), this, SLOT(settingsChanged()));
+    connect(cbStart, SIGNAL(stateChanged(int)), this, SLOT(settingsChanged()));
+
+    connect(buttonStartStop, SIGNAL(clicked()), this, SLOT(startStopSelected()));
+    buttonDefault->setGuiItem(KStandardGuiItem::defaults());
+    connect(buttonDefault, SIGNAL(clicked()), this, SLOT(defaultSelected()));
+    connect(buttonReset, SIGNAL(clicked()), this, SLOT(resetSelected()));
+    buttonApply->setGuiItem(KStandardGuiItem::apply());
+    connect(buttonApply, SIGNAL(clicked()), this, SLOT(applySelected()));
+    buttonHelp->setGuiItem(KStandardGuiItem::help());
+    connect(buttonHelp, SIGNAL(clicked()), this, SLOT(helpSelected()));
+    buttonClose->setGuiItem(KStandardGuiItem::close());
+    connect(buttonClose, SIGNAL(clicked()), this, SLOT(closeSelected()));
+    buttonQuit->setGuiItem(KStandardGuiItem::quit());
+    connect(buttonQuit, SIGNAL(clicked()), this, SLOT(quitSelected()));
+
+
+    // When we first start, it's nice to not click immediately.
+    // So, tell MT we're just starting
+    mousetool_just_started = true;
+
+    startTimer(100);
+    trayIcon = new KMouseToolTray(this);
+    updateStartStopText();
+    connect(trayIcon, SIGNAL(startStopSelected()), this, SLOT(startStopSelected()));
+    connect(trayIcon, SIGNAL(configureSelected()), this, SLOT(configureSelected()));
+    connect(trayIcon, SIGNAL(aboutSelected()), this, SLOT(aboutSelected()));
+    connect(trayIcon, SIGNAL(helpSelected()), this, SLOT(helpSelected()));
+    connect(trayIcon, SIGNAL(quitSelected()), this, SLOT(quitSelected()));
+
+    aboutDlg = new KAboutApplicationDialog(KGlobal::mainComponent().aboutData());
 }
 
 KMouseTool::~KMouseTool()
@@ -291,364 +311,375 @@ KMouseTool::~KMouseTool()
 // these should be moved to a separate file.
 void getMouseButtons()
 {
-	unsigned char buttonMap[3];
-	const int buttonCount = XGetPointerMapping(display, buttonMap, 3);
-	switch (buttonCount)
-	{
-	case 0:
-	case 1:
-		// ### should not happen
-		leftButton = 1;
-		rightButton = 1;
-		break;
-	case 2:
-		leftButton = buttonMap[0];
-		rightButton = buttonMap[1];
-		break;
-	default:
-		leftButton = buttonMap[0];
-		rightButton = buttonMap[2];
-		break;
-	}
+    unsigned char buttonMap[3];
+    const int buttonCount = XGetPointerMapping(display, buttonMap, 3);
+    switch (buttonCount) {
+    case 0:
+    case 1:
+        // ### should not happen
+        leftButton = 1;
+        rightButton = 1;
+        break;
+    case 2:
+        leftButton = buttonMap[0];
+        rightButton = buttonMap[1];
+        break;
+    default:
+        leftButton = buttonMap[0];
+        rightButton = buttonMap[2];
+        break;
+    }
 }
 
 void LeftClick()
 {
-	XTestFakeButtonEvent(display, leftButton, true, 0);
-	XTestFakeButtonEvent(display, leftButton, false, 0);
+    XTestFakeButtonEvent(display, leftButton, true, 0);
+    XTestFakeButtonEvent(display, leftButton, false, 0);
 }
 
 void DoubleClick()
 {
-	XTestFakeButtonEvent(display, leftButton, true, 0);
-	XTestFakeButtonEvent(display, leftButton, false, 100);
-	XTestFakeButtonEvent(display, leftButton, true, 200);
-	XTestFakeButtonEvent(display, leftButton, false, 300);
+    XTestFakeButtonEvent(display, leftButton, true, 0);
+    XTestFakeButtonEvent(display, leftButton, false, 100);
+    XTestFakeButtonEvent(display, leftButton, true, 200);
+    XTestFakeButtonEvent(display, leftButton, false, 300);
 }
 
 void RightClick()
 {
-	XTestFakeButtonEvent(display, rightButton, true, 0);
-	XTestFakeButtonEvent(display, rightButton, false, 0);
+    XTestFakeButtonEvent(display, rightButton, true, 0);
+    XTestFakeButtonEvent(display, rightButton, false, 0);
 }
 
 
 void LeftDn()
 {
-	XTestFakeButtonEvent(display, leftButton, true, 0);
+    XTestFakeButtonEvent(display, leftButton, true, 0);
 }
 
 
 void LeftUp()
 {
-	XTestFakeButtonEvent(display, leftButton, false, 0);
+    XTestFakeButtonEvent(display, leftButton, false, 0);
 }
 
 
 void queryPointer(Window *pidRoot, int *pnRx, int *pnRy, int *pnX, int *pnY, unsigned int *puMask)
 {
-	Window id2, idRoot;
-	int screen_num;
+    Window id2, idRoot;
+    int screen_num;
 
-	screen_num = DefaultScreen(display);
-	idRoot = RootWindow(display,screen_num);
-	XQueryPointer(display, idRoot, &idRoot, &id2, pnRx, pnRy, pnX, pnY, puMask);
+    screen_num = DefaultScreen(display);
+    idRoot = RootWindow(display, screen_num);
+    XQueryPointer(display, idRoot, &idRoot, &id2, pnRx, pnRy, pnX, pnY, puMask);
 
-	*pidRoot = idRoot;
+    *pidRoot = idRoot;
 }
 
 // return 1 if cursor has moved, 0 otherwise
-int CursorHasMoved (int minMovement)
+int CursorHasMoved(int minMovement)
 {
-	static int nOldRootX = -1;
-	static int nOldRootY = -1;
+    static int nOldRootX = -1;
+    static int nOldRootY = -1;
 
-//	XEvent evButtonEvent;
-	Window idRootWin;
-	int nRootX, nRootY, nWinX, nWinY;
-	unsigned int uintMask;
+//  XEvent evButtonEvent;
+    Window idRootWin;
+    int nRootX, nRootY, nWinX, nWinY;
+    unsigned int uintMask;
 
-	queryPointer(&idRootWin, &nRootX, &nRootY, &nWinX, &nWinY, &uintMask);
+    queryPointer(&idRootWin, &nRootX, &nRootY, &nWinX, &nWinY, &uintMask);
 
-	int nRes = 0;
-	if ((nRootX>nOldRootX?nRootX-nOldRootX:nOldRootX-nRootX) >= minMovement)
-		nRes = 1;
-	if ((nRootY>nOldRootY?nRootY-nOldRootY:nOldRootY-nRootY) >= minMovement)
-		nRes = 1;
+    int nRes = 0;
+    if ((nRootX > nOldRootX ? nRootX - nOldRootX : nOldRootX - nRootX) >= minMovement)
+        nRes = 1;
+    if ((nRootY > nOldRootY ? nRootY - nOldRootY : nOldRootY - nRootY) >= minMovement)
+        nRes = 1;
 
-	currentXPosition = nRootX;
-	currentYPosition = nRootY;
+    currentXPosition = nRootX;
+    currentYPosition = nRootY;
 
-	if (nRes) {
-		nOldRootX = nRootX;
-		nOldRootY = nRootY;
-	}
+    if (nRes) {
+        nOldRootX = nRootX;
+        nOldRootY = nRootY;
+    }
 
-	return nRes;
+    return nRes;
 }
 // End mouse monitoring and event creation code
 
 
 bool KMouseTool::isAutostart()
 {
-	QString sym = autostartdirname;
-	sym += QLatin1String( "kmousetool" );			// sym is now full path to symlink
-	QFileInfo fi(sym);
+    QString sym = autostartdirname;
+    sym += QLatin1String("kmousetool");              // sym is now full path to symlink
+    QFileInfo fi(sym);
 
-	return fi.exists();
+    return fi.exists();
 }
 
-void KMouseTool::setAutostart (bool start)
+void KMouseTool::setAutostart(bool start)
 {
-	QString sym = autostartdirname;
-	sym += QLatin1String( "kmousetool" );			// sym is now full path to symlink
-	QFileInfo fi(sym);
-	QString cmd;
+    QString sym = autostartdirname;
+    sym += QLatin1String("kmousetool");              // sym is now full path to symlink
+    QFileInfo fi(sym);
+    QString cmd;
 
-	if (start) {
-		if (!fi.exists())  			// if it doesn't exist, make it
-		cmd = QString(QLatin1String( "ln -s %1 %2" )).arg(appfilename).arg(autostartdirname);
-	}
-	else {
-	if (fi.exists()) 			// if it exists, delete it
-		cmd = QString(QLatin1String( "rm -f %1" )).arg(sym);
-	}
-	system(cmd.toAscii());
+    if (start) {
+        if (!fi.exists())           // if it doesn't exist, make it
+            cmd = QString(QLatin1String("ln -s %1 %2")).arg(appfilename).arg(autostartdirname);
+    } else {
+        if (fi.exists())            // if it exists, delete it
+            cmd = QString(QLatin1String("rm -f %1")).arg(sym);
+    }
+    system(cmd.toAscii());
 }
 
 bool KMouseTool::applySettings()
 {
-	int drag, dwell;
+    int drag, dwell;
+
+    dwell = dwellTimeEdit->value();
+    drag = dragTimeEdit->value() ;
 
-	dwell = dwellTimeEdit->value();
-	drag = dragTimeEdit->value() ;
+    // The drag time must be less than the dwell time
+    if (dwell < drag) {
+        KMessageBox::sorry(this, i18n("The drag time must be less than or equal to the dwell time."), i18n("Invalid Value"));
+        return false;
+    }
 
-	// The drag time must be less than the dwell time
-	if ( dwell < drag) {
-		KMessageBox::sorry(this, i18n("The drag time must be less than or equal to the dwell time."), i18n("Invalid Value"));
-		return false;
-	}
+    // if we got here, we must be okay.
+    min_movement   = movementEdit->value();
+    smart_drag_on  = cbDrag->isChecked();
+    playSound      = cbClick->isChecked();
+    strokesEnabled = cbStroke->isChecked();
+    setAutostart(cbStart->isChecked());
 
-	// if we got here, we must be okay.
-	min_movement   = movementEdit->value();
-	smart_drag_on  = cbDrag->isChecked();
-	playSound      = cbClick->isChecked();
-	strokesEnabled = cbStroke->isChecked();
-	setAutostart (cbStart->isChecked());
+    dwell_time = dwell;
+    drag_time  = drag;
+    tick_count = max_ticks;
 
-	dwell_time = dwell;
-	drag_time  = drag;
-	tick_count = max_ticks;
+    saveOptions();
+    settingsChanged();
+    return true;
+}
 
-	saveOptions();
-	settingsChanged();
-	return true;
+
+int KMouseTool::showItemIndex()
+{
+    return  DisableKey->currentIndex();
 }
 
+bool KMouseTool::implement()
+{
+    KModifierKeyInfo info;
+    if (KMouseTool::showItemIndex() == 1 && info.isKeyPressed(Qt::Key_Control) == true)
+        return true;
+    if (KMouseTool::showItemIndex() == 2 && info.isKeyPressed(Qt::Key_Alt) == true)
+        return true;
+    if (KMouseTool::showItemIndex() == 3 && info.isKeyPressed(Qt::Key_Shift) == true)
+        return true;
+    if (KMouseTool::showItemIndex() == 4 && info.isKeyPressed(Qt::Key_NumLock) == true)
+        return true;
+    else
+        return false;
+}
 // Save options to kmousetoolrc file
 void KMouseTool::loadOptions()
 {
-	KConfigGroup cfg = KGlobal::config()->group("UserOptions");
+    KConfigGroup cfg = KGlobal::config()->group("UserOptions");
 
-	playSound = cfg.readEntry("AudibleClick", false);
-	smart_drag_on = cfg.readEntry("SmartDrag", false);
+    playSound = cfg.readEntry("AudibleClick", false);
+    smart_drag_on = cfg.readEntry("SmartDrag", false);
 
-	dwell_time = cfg.readEntry("DwellTime",5);
-	drag_time = cfg.readEntry("DragTime",3);
-	min_movement = cfg.readEntry("Movement",5);
-	strokesEnabled = cfg.readEntry("strokesEnabled", false);
+    dwell_time = cfg.readEntry("DwellTime", 5);
+    drag_time = cfg.readEntry("DragTime", 3);
+    min_movement = cfg.readEntry("Movement", 5);
+    strokesEnabled = cfg.readEntry("strokesEnabled", false);
 
-	QPoint p;
-	int x = cfg.readEntry("x",0);
-	int y = cfg.readEntry("y",0);
-	p.setX(x);
-	p.setY(y);
-	move(p);
+    QPoint p;
+    int x = cfg.readEntry("x", 0);
+    int y = cfg.readEntry("y", 0);
+    p.setX(x);
+    p.setY(y);
+    move(p);
 
-	mousetool_is_running = cfg.readEntry("MouseToolIsRunning", false);
-	display = XOpenDisplay(NULL);
+    mousetool_is_running = cfg.readEntry("MouseToolIsRunning", false);
+    display = XOpenDisplay(NULL);
 }
 
 // Save options to kmousetoolrc file
 void KMouseTool::saveOptions()
 {
-	QPoint p = pos();
-	int x = p.x();
-	int y = p.y();
-
-	KConfigGroup cfg = KGlobal::config()->group("ProgramOptions");
-	cfg.writeEntry("Version", KMOUSETOOL_VERSION);
-	cfg = KGlobal::config()->group("UserOptions");
-	cfg.writeEntry("x", x);
-	cfg.writeEntry("y", y);
-	cfg.writeEntry("strokesEnabled", strokesEnabled);
-	cfg.writeEntry("IsMinimized", isHidden());
-	cfg.writeEntry("DwellTime", dwell_time);
-	cfg.writeEntry("DragTime", drag_time);
-	cfg.writeEntry("Movement", min_movement);
-	cfg.writeEntry("SmartDrag", smart_drag_on);
-	cfg.writeEntry("AudibleClick", playSound);
-	cfg.writeEntry("MouseToolIsRunning", mousetool_is_running);
-	cfg.sync();
+    QPoint p = pos();
+    int x = p.x();
+    int y = p.y();
+
+    KConfigGroup cfg = KGlobal::config()->group("ProgramOptions");
+    cfg.writeEntry("Version", KMOUSETOOL_VERSION);
+    cfg = KGlobal::config()->group("UserOptions");
+    cfg.writeEntry("x", x);
+    cfg.writeEntry("y", y);
+    cfg.writeEntry("strokesEnabled", strokesEnabled);
+    cfg.writeEntry("IsMinimized", isHidden());
+    cfg.writeEntry("DwellTime", dwell_time);
+    cfg.writeEntry("DragTime", drag_time);
+    cfg.writeEntry("Movement", min_movement);
+    cfg.writeEntry("SmartDrag", smart_drag_on);
+    cfg.writeEntry("AudibleClick", playSound);
+    cfg.writeEntry("MouseToolIsRunning", mousetool_is_running);
+    cfg.sync();
 }
 
 void KMouseTool::updateStartStopText()
 {
-	if (mousetool_is_running)
-		buttonStartStop->setText(i18n("&Stop"));
-	else
-		buttonStartStop->setText(i18nc("Start tracking the mouse", "&Start"));
-	trayIcon->updateStartStopText(mousetool_is_running);
+    if (mousetool_is_running)
+        buttonStartStop->setText(i18n("&Stop"));
+    else
+        buttonStartStop->setText(i18nc("Start tracking the mouse", "&Start"));
+    trayIcon->updateStartStopText(mousetool_is_running);
 }
 
 bool KMouseTool::newSettings()
 {
-	return ((dwell_time != dwellTimeEdit->value()) ||
-		(drag_time != dragTimeEdit->value()) ||
-		(min_movement != movementEdit->value()) ||
-		(smart_drag_on != cbDrag->isChecked()) ||
-		(playSound != cbClick->isChecked()) ||
-		(strokesEnabled != cbStroke->isChecked()) ||
-		(isAutostart() != cbStart->isChecked()));
+    return ((dwell_time != dwellTimeEdit->value()) ||
+            (drag_time != dragTimeEdit->value()) ||
+            (min_movement != movementEdit->value()) ||
+            (smart_drag_on != cbDrag->isChecked()) ||
+            (playSound != cbClick->isChecked()) ||
+            (strokesEnabled != cbStroke->isChecked()) ||
+            (isAutostart() != cbStart->isChecked()));
 }
 
 bool KMouseTool::defaultSettings()
 {
-	return ((5 == dwellTimeEdit->value()) &&
-		(3 == dragTimeEdit->value()) &&
-		(5 == movementEdit->value()) &&
-		!cbDrag->isChecked() &&
-		!cbClick->isChecked() &&
-		!cbStroke->isChecked() &&
-		!cbStart->isChecked());
+    return ((5 == dwellTimeEdit->value()) &&
+            (3 == dragTimeEdit->value()) &&
+            (5 == movementEdit->value()) &&
+            !cbDrag->isChecked() &&
+            !cbClick->isChecked() &&
+            !cbStroke->isChecked() &&
+            !cbStart->isChecked());
 }
 
 /******** SLOTS **********/
-
 // Value or state changed
-void KMouseTool::settingsChanged ()
+void KMouseTool::settingsChanged()
 {
-	buttonReset->setEnabled (newSettings());
-	buttonApply->setEnabled (newSettings());
-	buttonDefault->setDisabled (defaultSettings());
+    buttonReset->setEnabled(newSettings());
+    buttonApply->setEnabled(newSettings());
+    buttonDefault->setDisabled(defaultSettings());
 }
 
 // Buttons within the dialog
 void KMouseTool::startStopSelected()
 {
-	mousetool_is_running = !mousetool_is_running;
-	updateStartStopText();
+    mousetool_is_running = !mousetool_is_running;
+    updateStartStopText();
 }
 
 void KMouseTool::defaultSelected()
 {
-	setDefaultSettings();
+    setDefaultSettings();
 }
 
 void KMouseTool::resetSelected()
 {
-	resetSettings();
+    resetSettings();
 }
 
 void KMouseTool::applySelected()
 {
-	applySettings();
+    applySettings();
 }
 
 // Buttons at the bottom of the dialog
 void KMouseTool::helpSelected()
 {
-	KToolInvocation::invokeHelp();
+    KToolInvocation::invokeHelp();
 }
 
 void KMouseTool::closeSelected()
 {
-	if (newSettings())
-	{
-		int answer = KMessageBox::questionYesNoCancel (this,
-			i18n("There are unsaved changes in the active module.\nDo you want to apply the changes before closing the configuration window or discard the changes?"),
-			i18n("Closing Configuration Window"),
-			KStandardGuiItem::apply(), KStandardGuiItem::discard(),
-			KStandardGuiItem::cancel(), QLatin1String( "AutomaticSave" ));
-		if (answer == KMessageBox::Yes)
-			applySettings();
-		else if (answer == KMessageBox::No)
-			resetSettings();
-		if (answer != KMessageBox::Cancel)
-			hide();
-	}
-	else
-		hide();
+    if (newSettings()) {
+        int answer = KMessageBox::questionYesNoCancel(this,
+                     i18n("There are unsaved changes in the active module.\nDo you want to apply the changes before closing the configuration window or discard the changes?"),
+                     i18n("Closing Configuration Window"),
+                     KStandardGuiItem::apply(), KStandardGuiItem::discard(),
+                     KStandardGuiItem::cancel(), QLatin1String("AutomaticSave"));
+        if (answer == KMessageBox::Yes)
+            applySettings();
+        else if (answer == KMessageBox::No)
+            resetSettings();
+        if (answer != KMessageBox::Cancel)
+            hide();
+    } else
+        hide();
 }
 
 void KMouseTool::quitSelected()
 {
-	if (newSettings())
-	{
-		int answer = KMessageBox::questionYesNoCancel (this,
-			i18n("There are unsaved changes in the active module.\nDo you want to apply the changes before quitting KMousetool or discard the changes?"),
-			i18n("Quitting KMousetool"),
-			KStandardGuiItem::apply(), KStandardGuiItem::discard(),
-			KStandardGuiItem::cancel(), QLatin1String( "AutomaticSave" ));
-		if (answer == KMessageBox::Yes)
-			applySettings();
-		if (answer != KMessageBox::Cancel)
-		{
-			saveOptions();
-			kapp->quit();
-		}
-	}
-	else
-	{
-		saveOptions();
-		kapp->quit();
-	}
+    if (newSettings()) {
+        int answer = KMessageBox::questionYesNoCancel(this,
+                     i18n("There are unsaved changes in the active module.\nDo you want to apply the changes before quitting KMousetool or discard the changes?"),
+                     i18n("Quitting KMousetool"),
+                     KStandardGuiItem::apply(), KStandardGuiItem::discard(),
+                     KStandardGuiItem::cancel(), QLatin1String("AutomaticSave"));
+        if (answer == KMessageBox::Yes)
+            applySettings();
+        if (answer != KMessageBox::Cancel) {
+            saveOptions();
+            kapp->quit();
+        }
+    } else {
+        saveOptions();
+        kapp->quit();
+    }
 }
 
 // Menu functions
 void KMouseTool::configureSelected()
 {
-	show();
-	raise();
-	activateWindow();
+    show();
+    raise();
+    activateWindow();
 }
 
 void KMouseTool::aboutSelected()
 {
-	aboutDlg->show();
+    aboutDlg->show();
 }
 
 
 
-KMouseToolTray::KMouseToolTray (QWidget *parent) : KStatusNotifierItem(parent)
+KMouseToolTray::KMouseToolTray(QWidget *parent) : KStatusNotifierItem(parent)
 {
-	setStatus(KStatusNotifierItem::Active);
-	startStopAct = contextMenu()->addAction (i18nc("Start tracking the mouse", "&Start"), this, SIGNAL(startStopSelected()));
-	contextMenu()->addSeparator();
-        QAction* act;
-	act = contextMenu()->addAction (i18n("&Configure KMouseTool..."), this, SIGNAL(configureSelected()));
-        act->setIcon(KIcon(QLatin1String( "configure" )));
-	contextMenu()->addSeparator();
-	act = contextMenu()->addAction (i18n("KMousetool &Handbook"), this, SIGNAL(helpSelected()));
-        act->setIcon(KIcon(QLatin1String( "help-contents" )));
-	act = contextMenu()->addAction (i18n("&About KMouseTool"), this, SIGNAL(aboutSelected()));
-        act->setIcon(KIcon(QLatin1String( "kmousetool" )));
+    setStatus(KStatusNotifierItem::Active);
+    startStopAct = contextMenu()->addAction(i18nc("Start tracking the mouse", "&Start"), this, SIGNAL(startStopSelected()));
+    contextMenu()->addSeparator();
+    QAction* act;
+    act = contextMenu()->addAction(i18n("&Configure KMouseTool..."), this, SIGNAL(configureSelected()));
+    act->setIcon(KIcon(QLatin1String("configure")));
+    contextMenu()->addSeparator();
+    act = contextMenu()->addAction(i18n("KMousetool &Handbook"), this, SIGNAL(helpSelected()));
+    act->setIcon(KIcon(QLatin1String("help-contents")));
+    act = contextMenu()->addAction(i18n("&About KMouseTool"), this, SIGNAL(aboutSelected()));
+    act->setIcon(KIcon(QLatin1String("kmousetool")));
 }
 
-KMouseToolTray::~KMouseToolTray() {
+KMouseToolTray::~KMouseToolTray()
+{
 }
 
 void KMouseToolTray::updateStartStopText(bool mousetool_is_running)
 {
-	QIcon icon;
-
-	if (mousetool_is_running) {
-                startStopAct->setText(i18n("&Stop"));
-		icon = KIconLoader::global()->loadIcon(QLatin1String( "kmousetool_on" ), KIconLoader::Small);
-	}
-	else {
-                startStopAct->setText(i18nc("Start tracking the mouse", "&Start"));
-		icon = KIconLoader::global()->loadIcon(QLatin1String( "kmousetool_off" ), KIconLoader::Small);
-	}
-	setIconByPixmap (icon);
+    QIcon icon;
+
+    if (mousetool_is_running) {
+        startStopAct->setText(i18n("&Stop"));
+        icon = KIconLoader::global()->loadIcon(QLatin1String("kmousetool_on"), KIconLoader::Small);
+    } else {
+        startStopAct->setText(i18nc("Start tracking the mouse", "&Start"));
+        icon = KIconLoader::global()->loadIcon(QLatin1String("kmousetool_off"), KIconLoader::Small);
+    }
+    setIconByPixmap(icon);
 }
diff --git a/kmousetool/kmousetool.h b/kmousetool/kmousetool.h
index 245d3ef..88581fc 100644
--- a/kmousetool/kmousetool.h
+++ b/kmousetool/kmousetool.h
@@ -26,6 +26,8 @@
 #include <QtGui/QLabel>
 #include <QtCore/QTimerEvent>
 #include <QtGui/QWidget>
+#include <QComboBox>
+#include <QStackedWidget>
 
 #include "version.h"
 
@@ -41,7 +43,7 @@ class KMouseToolTray;
 
 namespace Phonon
 {
-      class MediaObject;
+class MediaObject;
 }
 
 /**
@@ -53,158 +55,163 @@ namespace Phonon
 
 class KMouseTool : public QWidget, public Ui::KMouseToolUI
 {
-	Q_OBJECT
+    Q_OBJECT
 
 private:
-	MTStroke stroke;
-
-	// boolean flags to keep track of program states
-	int mouse_is_down;
-	int continue_timer;
-	int tick_count;
-	int dwell_time;
-	int drag_time;
-	int max_ticks;
-	int min_movement;
-	bool smart_drag_on;
-	bool playSound;
-	bool mousetool_is_running;
-	bool mousetool_just_started;
-	bool moving;
-	bool strokesEnabled;
-
-	QString autostartdirname;
-	QString rcfilename;
-	QString appfilename;
-	QString	mSoundFileName;
-	Phonon::MediaObject *mplayer;
-	KMouseToolTray *trayIcon;
-
-	KAboutApplicationDialog *aboutDlg;
-
-	/**
-	 * Initialize all variables
-	 */
-	void init_vars();
-
-	/**
-	 * Take care of details of playing .wav file
-	 *
-	 * Currently uses KAudioPlayer::play(), which has an annoying delay.
-	 *
-	 * The solution seems to be to use MCOP, but I haven't been able to get that to work yet.
-	 */
-	void playTickSound();
-
-	/**
-	 * Load state of program from "kmousetool.rc" in the user's local .kde folder,
-	 *
-	 */
-	void loadOptions();
-
-	/**
-	 * Save state of program under the user's local .kde folder,
-	 * in a file named "kmousetool.rc"
-	 *
-	 */
+    MTStroke stroke;
+
+    // boolean flags to keep track of program states
+    int mouse_is_down;
+    int continue_timer;
+    int tick_count;
+    int dwell_time;
+    int drag_time;
+    int max_ticks;
+    int min_movement;
+    bool smart_drag_on;
+    bool playSound;
+    bool mousetool_is_running;
+    bool mousetool_just_started;
+    bool moving;
+    bool strokesEnabled;
+
+    QString autostartdirname;
+    QString rcfilename;
+    QString appfilename;
+    QString mSoundFileName;
+    Phonon::MediaObject *mplayer;
+    KMouseToolTray *trayIcon;
+    KAboutApplicationDialog *aboutDlg;
+
+    /**
+     * Initialize all variables
+     */
+    void init_vars();
+
+    /**
+     * Take care of details of playing .wav file
+     *
+     * Currently uses KAudioPlayer::play(), which has an annoying delay.
+     *
+     * The solution seems to be to use MCOP, but I haven't been able to get that to work yet.
+     */
+    void playTickSound();
+
+    /**
+     * Load state of program from "kmousetool.rc" in the user's local .kde folder,
+     *
+     */
+    void loadOptions();
+
+    /**
+     * Save state of program under the user's local .kde folder,
+     * in a file named "kmousetool.rc"
+     *
+     */
     void saveOptions();
 
-	/**
-	 * This function changes text on button depending on
-	 * state of time (either "start", or "stop").
-	 **/
-	void updateStartStopText();
-
-	/**
-	 * Returns true if the current values in the settings window are different
-	 * from the settings currently used
-	 **/
-	bool newSettings();
-
-	/**
-	 * Returns true if the current values in the settings window are identical
-	 * with the default settings
-	 **/
-	bool defaultSettings();
-
-	/**
-	 * Resets the values in the settings window to the settings currently used
-	 **/
-	void resetSettings();
-
-	/**
-	 * Sets the values in the settings window to the default settings
-	 **/
-	void setDefaultSettings();
-
-	/**
-	 * Applies the current values in the settings window
-	 **/
-	bool applySettings();
-
-	bool isAutostart();
-	void setAutostart (bool start);
+    /**
+     * This function changes text on button depending on
+     * state of time (either "start", or "stop").
+     **/
+    void updateStartStopText();
+
+    /**
+     * Returns true if the current values in the settings window are different
+     * from the settings currently used
+     **/
+    bool newSettings();
+
+    /**
+     * Returns true if the current values in the settings window are identical
+     * with the default settings
+     **/
+    bool defaultSettings();
+
+    /**
+     * Resets the values in the settings window to the settings currently used
+     **/
+    void resetSettings();
+
+    /**
+     * Sets the values in the settings window to the default settings
+     **/
+    void setDefaultSettings();
+
+    /**
+     * Applies the current values in the settings window
+     **/
+    bool applySettings();
+
+    bool isAutostart();
+    void setAutostart(bool start);
 
 public slots:
-	/**
-	 * This slot is called whenever a value in the settings window was changed.
-	 * It enabled and disables the three buttons "Defaults", "Reset" and "Apply".
-	 **/
-	void settingsChanged();
+    /**
+     * This slot is called whenever a value in the settings window was changed.
+     * It enabled and disables the three buttons "Defaults", "Reset" and "Apply".
+     **/
+    void settingsChanged();
 
-	void startStopSelected();
+    void startStopSelected();
 
-	void defaultSelected();
-	void resetSelected();
-	void applySelected();
+    void defaultSelected();
+    void resetSelected();
+    void applySelected();
 
-	void helpSelected();
-	void closeSelected();
-	void quitSelected();
+    void helpSelected();
+    void closeSelected();
+    void quitSelected();
 
-	void aboutSelected();
-	void configureSelected();
+    void aboutSelected();
+    void configureSelected();
+    int showItemIndex();
 
 public:
-	/**
-	 * This function runs the show; it is called once every
-	 * 1/10 second.
-	 *
-	 * It checks to see if SmartDrag is on, and compares the
-	 * current mouse position to its previous position to see
-	 * whether to send a down click, and up click, or wait.
-	 */
-	void timerEvent (QTimerEvent *e);
-
-	/**
-	 * This generates a normal click event --
-	 * down, up, or down-up, depending on smart-drag settings and current state
-	 */
-	void normalClick();
-
-	/**
-	 *  construtor
-	 */
-	explicit KMouseTool(QWidget* parent=0, const char *name=0);
-
-	/** destructor */
-	~KMouseTool();
+    /**
+     * This function runs the show; it is called once every
+     * 1/10 second.
+     *
+     * It checks to see if SmartDrag is on, and compares the
+     * current mouse position to its previous position to see
+     * whether to send a down click, and up click, or wait.
+     */
+    void timerEvent(QTimerEvent *e);
+
+    /**
+     * This generates a normal click event --
+     * down, up, or down-up, depending on smart-drag settings and current state
+     */
+    void normalClick();
+
+    /**
+     *  construtor
+     */
+    explicit KMouseTool(QWidget* parent = 0, const char *name = 0);
+
+    /** destructor */
+    ~KMouseTool();
+    bool implement();
+    bool isKeyPressed(Qt::Key key);
+
 };
 
-class KMouseToolTray : public KStatusNotifierItem {
-        Q_OBJECT
+class KMouseToolTray : public KStatusNotifierItem
+{
+    Q_OBJECT
 public:
-	explicit KMouseToolTray (QWidget *parent=0);
-	~KMouseToolTray();
+    explicit KMouseToolTray(QWidget *parent = 0);
+    ~KMouseToolTray();
 
-	void updateStartStopText (bool mousetool_is_running);
+    void updateStartStopText(bool mousetool_is_running);
 signals:
-	void startStopSelected();
-	void configureSelected();
-	void aboutSelected();
-	void helpSelected();
+    void startStopSelected();
+    void configureSelected();
+    void aboutSelected();
+    void helpSelected();
+
 private:
-        QAction* startStopAct;
+    QAction* startStopAct;
 
 };
 #endif
diff --git a/kmousetool/kmousetoolui.ui b/kmousetool/kmousetoolui.ui
index e0e2ec3..5944e93 100644
--- a/kmousetool/kmousetoolui.ui
+++ b/kmousetool/kmousetoolui.ui
@@ -1,69 +1,116 @@
-<ui version="4.0" >
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <author>Akshay Ratan</author>
  <class>KMouseToolUI</class>
- <widget class="QWidget" name="KMouseToolUI" >
-  <property name="geometry" >
+ <widget class="QWidget" name="KMouseToolUI">
+  <property name="geometry">
    <rect>
     <x>0</x>
     <y>0</y>
-    <width>608</width>
-    <height>478</height>
+    <width>572</width>
+    <height>556</height>
    </rect>
   </property>
-  <property name="windowTitle" >
+  <property name="windowTitle">
    <string>KMouseTool</string>
   </property>
-  <layout class="QGridLayout" >
-   <property name="margin" >
+  <layout class="QGridLayout">
+   <property name="margin">
     <number>11</number>
    </property>
-   <property name="spacing" >
+   <property name="spacing">
     <number>6</number>
    </property>
-   <item row="2" column="0" >
-    <spacer>
-     <property name="orientation" >
-      <enum>Qt::Vertical</enum>
-     </property>
-     <property name="sizeType" >
-      <enum>QSizePolicy::Expanding</enum>
+   <item row="0" column="0">
+    <layout class="QHBoxLayout">
+     <property name="spacing">
+      <number>6</number>
      </property>
-     <property name="sizeHint" stdset="0" >
-      <size>
-       <width>20</width>
-       <height>30</height>
-      </size>
+     <property name="margin">
+      <number>0</number>
      </property>
-    </spacer>
+     <item>
+      <widget class="QLabel" name="textLabel1">
+       <property name="sizePolicy">
+        <sizepolicy hsizetype="Expanding" vsizetype="Preferred">
+         <horstretch>0</horstretch>
+         <verstretch>0</verstretch>
+        </sizepolicy>
+       </property>
+       <property name="text">
+        <string>KMouseTool will run as a background application after you close this dialog. To change the settings again, restart KMouseTool or use the KDE system tray.</string>
+       </property>
+       <property name="scaledContents">
+        <bool>false</bool>
+       </property>
+       <property name="alignment">
+        <set>Qt::AlignJustify|Qt::AlignVCenter</set>
+       </property>
+       <property name="wordWrap">
+        <bool>true</bool>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <spacer>
+       <property name="orientation">
+        <enum>Qt::Horizontal</enum>
+       </property>
+       <property name="sizeType">
+        <enum>QSizePolicy::Fixed</enum>
+       </property>
+       <property name="sizeHint" stdset="0">
+        <size>
+         <width>8</width>
+         <height>8</height>
+        </size>
+       </property>
+      </spacer>
+     </item>
+     <item>
+      <widget class="KPushButton" name="buttonStartStop">
+       <property name="sizePolicy">
+        <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
+         <horstretch>0</horstretch>
+         <verstretch>0</verstretch>
+        </sizepolicy>
+       </property>
+       <property name="text">
+        <string>&amp;Start</string>
+       </property>
+      </widget>
+     </item>
+    </layout>
    </item>
-   <item row="1" column="0" >
-    <widget class="QGroupBox" name="groupBox1" >
-     <property name="title" >
+   <item row="1" column="0">
+    <widget class="QGroupBox" name="groupBox1">
+     <property name="title">
       <string>Settings</string>
      </property>
-     <layout class="QGridLayout" >
-      <property name="margin" >
+     <layout class="QGridLayout">
+      <property name="margin">
        <number>11</number>
       </property>
-      <property name="spacing" >
+      <property name="spacing">
        <number>6</number>
       </property>
-      <item row="3" column="0" >
-       <layout class="QGridLayout" >
-        <property name="margin" >
+      <item row="3" column="0">
+       <layout class="QGridLayout">
+        <property name="margin">
          <number>0</number>
         </property>
-        <property name="spacing" >
+        <property name="spacing">
          <number>6</number>
         </property>
-        <item row="0" column="0" >
+        <item row="0" column="0">
          <spacer>
-          <property name="orientation" >
+          <property name="orientation">
            <enum>Qt::Horizontal</enum>
           </property>
-          <property name="sizeType" >
+          <property name="sizeType">
            <enum>QSizePolicy::Fixed</enum>
           </property>
-          <property name="sizeHint" stdset="0" >
+          <property name="sizeHint" stdset="0">
            <size>
             <width>16</width>
             <height>20</height>
@@ -71,152 +118,152 @@
           </property>
          </spacer>
         </item>
-        <item row="0" column="1" >
-         <widget class="QLabel" name="dragTimeLabel" >
-          <property name="sizePolicy" >
-           <sizepolicy vsizetype="Fixed" hsizetype="Preferred" >
+        <item row="0" column="1">
+         <widget class="QLabel" name="dragTimeLabel">
+          <property name="sizePolicy">
+           <sizepolicy hsizetype="Preferred" vsizetype="Fixed">
             <horstretch>0</horstretch>
             <verstretch>0</verstretch>
            </sizepolicy>
           </property>
-          <property name="text" >
+          <property name="text">
            <string>Drag t&amp;ime (1/10 sec):</string>
           </property>
-          <property name="buddy" >
+          <property name="buddy">
            <cstring>dragTimeEdit</cstring>
           </property>
          </widget>
         </item>
        </layout>
       </item>
-      <item row="3" column="1" >
-       <widget class="KIntSpinBox" name="dragTimeEdit" >
-        <property name="sizePolicy" >
-         <sizepolicy vsizetype="Fixed" hsizetype="Minimum" >
+      <item row="3" column="1">
+       <widget class="KIntSpinBox" name="dragTimeEdit">
+        <property name="sizePolicy">
+         <sizepolicy hsizetype="Minimum" vsizetype="Fixed">
           <horstretch>1</horstretch>
           <verstretch>0</verstretch>
          </sizepolicy>
         </property>
-        <property name="minimum" >
+        <property name="minimum">
          <number>1</number>
         </property>
-        <property name="maximum" >
+        <property name="maximum">
          <number>40</number>
         </property>
-        <property name="value" >
+        <property name="value">
          <number>3</number>
         </property>
        </widget>
       </item>
-      <item row="1" column="1" >
-       <widget class="KIntSpinBox" name="dwellTimeEdit" >
-        <property name="sizePolicy" >
-         <sizepolicy vsizetype="Fixed" hsizetype="Minimum" >
+      <item row="1" column="1">
+       <widget class="KIntSpinBox" name="dwellTimeEdit">
+        <property name="sizePolicy">
+         <sizepolicy hsizetype="Minimum" vsizetype="Fixed">
           <horstretch>1</horstretch>
           <verstretch>0</verstretch>
          </sizepolicy>
         </property>
-        <property name="minimum" >
+        <property name="minimum">
          <number>1</number>
         </property>
-        <property name="maximum" >
+        <property name="maximum">
          <number>40</number>
         </property>
-        <property name="value" >
+        <property name="value">
          <number>5</number>
         </property>
        </widget>
       </item>
-      <item row="0" column="0" >
-       <widget class="QLabel" name="movementLabel" >
-        <property name="text" >
+      <item row="0" column="0">
+       <widget class="QLabel" name="movementLabel">
+        <property name="text">
          <string>&amp;Minimum movement:</string>
         </property>
-        <property name="buddy" >
+        <property name="buddy">
          <cstring>movementEdit</cstring>
         </property>
        </widget>
       </item>
-      <item row="0" column="1" >
-       <widget class="KIntSpinBox" name="movementEdit" >
-        <property name="sizePolicy" >
-         <sizepolicy vsizetype="Fixed" hsizetype="Minimum" >
+      <item row="0" column="1">
+       <widget class="KIntSpinBox" name="movementEdit">
+        <property name="sizePolicy">
+         <sizepolicy hsizetype="Minimum" vsizetype="Fixed">
           <horstretch>1</horstretch>
           <verstretch>0</verstretch>
          </sizepolicy>
         </property>
-        <property name="minimum" >
+        <property name="minimum">
          <number>1</number>
         </property>
-        <property name="maximum" >
+        <property name="maximum">
          <number>40</number>
         </property>
        </widget>
       </item>
-      <item row="4" column="0" colspan="2" >
-       <widget class="QCheckBox" name="cbStroke" >
-        <property name="text" >
+      <item row="4" column="0" colspan="2">
+       <widget class="QCheckBox" name="cbStroke">
+        <property name="text">
          <string>&amp;Enable strokes</string>
         </property>
        </widget>
       </item>
-      <item row="1" column="0" >
-       <widget class="QLabel" name="dwellTimeLabel" >
-        <property name="sizePolicy" >
-         <sizepolicy vsizetype="Fixed" hsizetype="Preferred" >
+      <item row="1" column="0">
+       <widget class="QLabel" name="dwellTimeLabel">
+        <property name="sizePolicy">
+         <sizepolicy hsizetype="Preferred" vsizetype="Fixed">
           <horstretch>0</horstretch>
           <verstretch>0</verstretch>
          </sizepolicy>
         </property>
-        <property name="text" >
+        <property name="text">
          <string>D&amp;well time (1/10 sec):</string>
         </property>
-        <property name="buddy" >
+        <property name="buddy">
          <cstring>dwellTimeEdit</cstring>
         </property>
        </widget>
       </item>
-      <item row="2" column="0" colspan="2" >
-       <widget class="QCheckBox" name="cbDrag" >
-        <property name="text" >
+      <item row="2" column="0" colspan="2">
+       <widget class="QCheckBox" name="cbDrag">
+        <property name="text">
          <string>Smar&amp;t drag</string>
         </property>
-        <property name="checked" >
+        <property name="checked">
          <bool>true</bool>
         </property>
        </widget>
       </item>
-      <item row="7" column="0" colspan="2" >
-       <layout class="QHBoxLayout" >
-        <property name="spacing" >
+      <item row="7" column="0" colspan="2">
+       <layout class="QHBoxLayout">
+        <property name="spacing">
          <number>6</number>
         </property>
-        <property name="margin" >
+        <property name="margin">
          <number>0</number>
         </property>
         <item>
-         <widget class="KPushButton" name="buttonDefault" >
-          <property name="text" >
+         <widget class="KPushButton" name="buttonDefault">
+          <property name="text">
            <string>&amp;Defaults</string>
           </property>
          </widget>
         </item>
         <item>
-         <widget class="KPushButton" name="buttonReset" >
-          <property name="text" >
+         <widget class="KPushButton" name="buttonReset">
+          <property name="text">
            <string>&amp;Reset</string>
           </property>
          </widget>
         </item>
         <item>
          <spacer>
-          <property name="orientation" >
+          <property name="orientation">
            <enum>Qt::Horizontal</enum>
           </property>
-          <property name="sizeType" >
+          <property name="sizeType">
            <enum>QSizePolicy::Expanding</enum>
           </property>
-          <property name="sizeHint" stdset="0" >
+          <property name="sizeHint" stdset="0">
            <size>
             <width>31</width>
             <height>20</height>
@@ -225,24 +272,24 @@
          </spacer>
         </item>
         <item>
-         <widget class="KPushButton" name="buttonApply" >
-          <property name="text" >
+         <widget class="KPushButton" name="buttonApply">
+          <property name="text">
            <string>&amp;Apply</string>
           </property>
          </widget>
         </item>
        </layout>
       </item>
-      <item row="6" column="0" colspan="2" >
-       <widget class="QCheckBox" name="cbStart" >
-        <property name="text" >
+      <item row="6" column="0" colspan="2">
+       <widget class="QCheckBox" name="cbStart">
+        <property name="text">
          <string>Start with &amp;KDE</string>
         </property>
        </widget>
       </item>
-      <item row="5" column="0" colspan="2" >
-       <widget class="QCheckBox" name="cbClick" >
-        <property name="text" >
+      <item row="5" column="0" colspan="2">
+       <widget class="QCheckBox" name="cbClick">
+        <property name="text">
          <string>A&amp;udible click</string>
         </property>
        </widget>
@@ -250,91 +297,86 @@
      </layout>
     </widget>
    </item>
-   <item row="0" column="0" >
-    <layout class="QHBoxLayout" >
-     <property name="spacing" >
-      <number>6</number>
+   <item row="2" column="0">
+    <widget class="QComboBox" name="DisableKey">
+     <property name="toolTip">
+      <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-weight:600;&quot;&gt;Select the temporary disable key&lt;/span&gt;&lt;/p&gt;
+&lt;p style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
-     <property name="margin" >
-      <number>0</number>
+     <property name="whatsThis">
+      <string>Select the temporary disable key</string>
      </property>
      <item>
-      <widget class="QLabel" name="textLabel1" >
-       <property name="sizePolicy" >
-        <sizepolicy vsizetype="Preferred" hsizetype="Expanding" >
-         <horstretch>0</horstretch>
-         <verstretch>0</verstretch>
-        </sizepolicy>
-       </property>
-       <property name="text" >
-        <string>KMouseTool will run as a background application after you close this dialog. To change the settings again, restart KMouseTool or use the KDE system tray.</string>
-       </property>
-       <property name="scaledContents" >
-        <bool>false</bool>
-       </property>
-       <property name="alignment" >
-        <set>Qt::AlignJustify|Qt::AlignVCenter</set>
-       </property>
-       <property name="wordWrap" >
-        <bool>true</bool>
-       </property>
-      </widget>
+      <property name="text">
+       <string>NONE</string>
+      </property>
      </item>
      <item>
-      <spacer>
-       <property name="orientation" >
-        <enum>Qt::Horizontal</enum>
-       </property>
-       <property name="sizeType" >
-        <enum>QSizePolicy::Fixed</enum>
-       </property>
-       <property name="sizeHint" stdset="0" >
-        <size>
-         <width>8</width>
-         <height>8</height>
-        </size>
-       </property>
-      </spacer>
+      <property name="text">
+       <string>CTRL</string>
+      </property>
      </item>
      <item>
-      <widget class="KPushButton" name="buttonStartStop" >
-       <property name="sizePolicy" >
-        <sizepolicy vsizetype="Fixed" hsizetype="Fixed" >
-         <horstretch>0</horstretch>
-         <verstretch>0</verstretch>
-        </sizepolicy>
-       </property>
-       <property name="text" >
-        <string>&amp;Start</string>
-       </property>
-      </widget>
+      <property name="text">
+       <string>ALT</string>
+      </property>
      </item>
-    </layout>
+     <item>
+      <property name="text">
+       <string>SHIFT</string>
+      </property>
+     </item>
+     <item>
+      <property name="text">
+       <string>NUM</string>
+      </property>
+     </item>
+    </widget>
+   </item>
+   <item row="3" column="0">
+    <spacer>
+     <property name="orientation">
+      <enum>Qt::Vertical</enum>
+     </property>
+     <property name="sizeType">
+      <enum>QSizePolicy::Expanding</enum>
+     </property>
+     <property name="sizeHint" stdset="0">
+      <size>
+       <width>20</width>
+       <height>30</height>
+      </size>
+     </property>
+    </spacer>
    </item>
-   <item row="3" column="0" >
-    <layout class="QHBoxLayout" >
-     <property name="spacing" >
+   <item row="4" column="0">
+    <layout class="QHBoxLayout">
+     <property name="spacing">
       <number>6</number>
      </property>
-     <property name="margin" >
+     <property name="margin">
       <number>0</number>
      </property>
      <item>
-      <widget class="KPushButton" name="buttonHelp" >
-       <property name="text" >
+      <widget class="KPushButton" name="buttonHelp">
+       <property name="text">
         <string>&amp;Help</string>
        </property>
       </widget>
      </item>
      <item>
       <spacer>
-       <property name="orientation" >
+       <property name="orientation">
         <enum>Qt::Horizontal</enum>
        </property>
-       <property name="sizeType" >
+       <property name="sizeType">
         <enum>QSizePolicy::Expanding</enum>
        </property>
-       <property name="sizeHint" stdset="0" >
+       <property name="sizeHint" stdset="0">
         <size>
          <width>241</width>
          <height>20</height>
@@ -343,15 +385,15 @@
       </spacer>
      </item>
      <item>
-      <widget class="KPushButton" name="buttonClose" >
-       <property name="text" >
+      <widget class="KPushButton" name="buttonClose">
+       <property name="text">
         <string>&amp;Close</string>
        </property>
       </widget>
      </item>
      <item>
-      <widget class="KPushButton" name="buttonQuit" >
-       <property name="text" >
+      <widget class="KPushButton" name="buttonQuit">
+       <property name="text">
         <string>&amp;Quit</string>
        </property>
       </widget>
@@ -360,21 +402,21 @@
    </item>
   </layout>
  </widget>
-  <customwidgets>
-  <customwidget>
-   <class>KIntSpinBox</class>
-   <extends>QSpinBox</extends>
-   <header>knuminput.h</header>
-  </customwidget>
+ <customwidgets>
   <customwidget>
    <class>KPushButton</class>
    <extends>QPushButton</extends>
    <header>kpushbutton.h</header>
   </customwidget>
+  <customwidget>
+   <class>KIntSpinBox</class>
+   <extends>QSpinBox</extends>
+   <header>knuminput.h</header>
+  </customwidget>
  </customwidgets>
  <includes>
-  <include location="global" >knuminput.h</include>
-  <include location="global" >kpushbutton.h</include>
+  <include location="global">knuminput.h</include>
+  <include location="global">kpushbutton.h</include>
  </includes>
  <resources/>
  <connections>
@@ -384,13 +426,13 @@
    <receiver>dragTimeLabel</receiver>
    <slot>setEnabled(bool)</slot>
    <hints>
-    <hint type="sourcelabel" >
-     <x>20</x>
-     <y>20</y>
+    <hint type="sourcelabel">
+     <x>44</x>
+     <y>186</y>
     </hint>
-    <hint type="destinationlabel" >
-     <x>20</x>
-     <y>20</y>
+    <hint type="destinationlabel">
+     <x>67</x>
+     <y>215</y>
     </hint>
    </hints>
   </connection>
@@ -400,15 +442,18 @@
    <receiver>dragTimeEdit</receiver>
    <slot>setEnabled(bool)</slot>
    <hints>
-    <hint type="sourcelabel" >
-     <x>20</x>
-     <y>20</y>
+    <hint type="sourcelabel">
+     <x>44</x>
+     <y>186</y>
     </hint>
-    <hint type="destinationlabel" >
-     <x>20</x>
-     <y>20</y>
+    <hint type="destinationlabel">
+     <x>212</x>
+     <y>215</y>
     </hint>
    </hints>
   </connection>
  </connections>
+ <slots>
+  <slot>setCurrentIndex(int)</slot>
+ </slots>
 </ui>
diff --git a/kmousetool/main.cpp b/kmousetool/main.cpp
index aa3a264..3a16d61 100644
--- a/kmousetool/main.cpp
+++ b/kmousetool/main.cpp
@@ -36,9 +36,9 @@ static const char description[] =
 
 int main(int argc, char *argv[])
 {
-    KAboutData aboutData( "kmousetool", 0, ki18n("KMouseTool"),
-    KMOUSETOOL_VERSION, ki18n(description), KAboutData::License_GPL,
-    ki18n("(c) 2002-2003, Jeff Roush\n(c) 2003, Gunnar Schmi Dt"), KLocalizedString(), "http://www.mousetool.com", "gunnar@schmi-dt.de");
+    KAboutData aboutData("kmousetool", 0, ki18n("KMouseTool"),
+                         KMOUSETOOL_VERSION, ki18n(description), KAboutData::License_GPL,
+                         ki18n("(c) 2002-2003, Jeff Roush\n(c) 2003, Gunnar Schmi Dt"), KLocalizedString(), "http://www.mousetool.com", "gunnar@schmi-dt.de");
 
     aboutData.addAuthor(ki18n("Gunnar Schmi Dt"), ki18n("Current maintainer"), "gunnar@schmi-dt.de", "http://www.schmi-dt.de");
     aboutData.addAuthor(ki18n("Olaf Schmidt"), ki18n("Usability improvements"), "ojschmidt@kde.org");
@@ -46,17 +46,17 @@ int main(int argc, char *argv[])
 
     aboutData.addCredit(ki18n("Joe Betts"));
     aboutData.setOrganizationDomain("kde.org");
-    KCmdLineArgs::init( argc, argv, &aboutData );
+    KCmdLineArgs::init(argc, argv, &aboutData);
 
     KCmdLineOptions options;
-    KCmdLineArgs::addCmdLineOptions( options ); // Add our own options.
+    KCmdLineArgs::addCmdLineOptions(options);   // Add our own options.
     KUniqueApplication::addCmdLineOptions();
 
-    KUniqueApplication::setApplicationName(QLatin1String( "kmousetool" ));
+    KUniqueApplication::setApplicationName(QLatin1String("kmousetool"));
 
     if (!KUniqueApplication::start()) {
-            fprintf(stderr, "KMouseTool is already running !\n");
-            exit(0);
+        fprintf(stderr, "KMouseTool is already running !\n");
+        exit(0);
     }
     KUniqueApplication a;
 
diff --git a/kmousetool/mtstroke.cpp b/kmousetool/mtstroke.cpp
index ad899f2..d53be83 100644
--- a/kmousetool/mtstroke.cpp
+++ b/kmousetool/mtstroke.cpp
@@ -44,31 +44,32 @@ int MTStroke::delta_xy = 10;
 
 const int MTStroke::min_num_points = 5;
 
-Pt MTStroke::LowerLeft (0,0);
-Pt MTStroke::LowerRight(0,0);
-Pt MTStroke::UpperLeft (0,0);
-Pt MTStroke::UpperRight(0,0);
+Pt MTStroke::LowerLeft(0, 0);
+Pt MTStroke::LowerRight(0, 0);
+Pt MTStroke::UpperLeft(0, 0);
+Pt MTStroke::UpperRight(0, 0);
 
 
 
-MTStroke::MTStroke(){
-  readSequence();
+MTStroke::MTStroke()
+{
+    readSequence();
 }
-MTStroke::~MTStroke(){
+MTStroke::~MTStroke()
+{
 }
 
 // add the new point, but only if it's not the same as the previous point.
 void MTStroke::addPt(int x, int y)
 {
-  if (points.size()==0) {
-    points.push_back(Pt(x,y));
-  }
-  else {
-    Pt pt(x,y);
-    if (!pt.sameAs(points[points.size()-1])) {
-      points.push_back(Pt(x,y));
+    if (points.size() == 0) {
+        points.push_back(Pt(x, y));
+    } else {
+        Pt pt(x, y);
+        if (!pt.sameAs(points[points.size() - 1])) {
+            points.push_back(Pt(x, y));
+        }
     }
-  }
 }
 
 
@@ -78,84 +79,84 @@ void MTStroke::addPt(int x, int y)
  */
 bool MTStroke::pointsContain(Pt pt)
 {
-  std::vector<Pt>::iterator pos;
-  for (pos=points.begin(); pos<points.end(); ++pos) {
-    if (pt.x==pos->x && pt.y==pos->y)
-      return true;
-  }
-  return false;
+    std::vector<Pt>::iterator pos;
+    for (pos = points.begin(); pos < points.end(); ++pos) {
+        if (pt.x == pos->x && pt.y == pos->y)
+            return true;
+    }
+    return false;
 }
 
 int MTStroke::getStrokeType()
 {
-  int size = points.size();
+    int size = points.size();
 
-  // If the mouse moved just a bit, it was probably bumped.  Don't click.
-  if (size<min_num_points)
-    return normal;
+    // If the mouse moved just a bit, it was probably bumped.  Don't click.
+    if (size < min_num_points)
+        return normal;
 //    return bumped_mouse;
 
-  Pt lastPoint = points[points.size()-1];
+    Pt lastPoint = points[points.size() - 1];
 
-  // If the mouse is pausing in a corner, then the user is either in the middle of a
-  // stroke, or wants to rest the mouse.  Don't click.
-  if (lastPoint.sameAs(LowerLeft) || lastPoint.sameAs(LowerRight)
-   || lastPoint.sameAs(UpperLeft) || lastPoint.sameAs(UpperRight))
-   return DontClick;
+    // If the mouse is pausing in a corner, then the user is either in the middle of a
+    // stroke, or wants to rest the mouse.  Don't click.
+    if (lastPoint.sameAs(LowerLeft) || lastPoint.sameAs(LowerRight)
+            || lastPoint.sameAs(UpperLeft) || lastPoint.sameAs(UpperRight))
+        return DontClick;
 
-  // If the mouse visited a corner...
-  if (pointsContain(LowerLeft)) {
-    reset();
-    return LowerLeftStroke;
-  }
-  if (pointsContain(UpperRight)) {
-    reset();
-    return UpperRightStroke;
-  }
-  scale();
+    // If the mouse visited a corner...
+    if (pointsContain(LowerLeft)) {
+        reset();
+        return LowerLeftStroke;
+    }
+    if (pointsContain(UpperRight)) {
+        reset();
+        return UpperRightStroke;
+    }
+    scale();
 
-  std::map<std::string, int>::iterator keypos = sequenceMap.find(sequence);
-  if (keypos == sequenceMap.end()) {
+    std::map<std::string, int>::iterator keypos = sequenceMap.find(sequence);
+    if (keypos == sequenceMap.end()) {
+        reset();
+        return normal;
+    }
     reset();
-    return normal;
-  }
-  reset();
 //  return RightClick;
-  return keypos->second;
+    return keypos->second;
 }
 
 void MTStroke::scale()
 {
-  getExtent();
-  int deltax = stroke_maxx - stroke_minx;
-  int deltay = stroke_maxy - stroke_miny;
-  int delta  = max(deltax, deltay);
-  int scale = (int) delta/2;
-
-  std::vector<Pt>::iterator pos;
-  for (pos=points.begin(); pos<points.end(); ++pos) {
-
-      // add an extra (scale/2) because the divide rounds _down_, and we want to
-      // round _up_ or _down_, depending on which is closer.
-    pos->x = (int) (pos->x-stroke_minx + scale/2)/scale;
-    pos->y = (int) (pos->y-stroke_miny + scale/2)/scale;
-
-    // now, get the integer representing this position and add it to the stroke sequence
-    int n = 3*pos->y + pos->x + 1;
-    int index = sequence.size()-1;
-    n += '0';
-    if (index==-1)
-      sequence += n;
-    else if (n!=sequence[index])
-      sequence += n;
-  }
+    getExtent();
+    int deltax = stroke_maxx - stroke_minx;
+    int deltay = stroke_maxy - stroke_miny;
+    int delta  = max(deltax, deltay);
+    int scale = (int) delta / 2;
+
+    std::vector<Pt>::iterator pos;
+    for (pos = points.begin(); pos < points.end(); ++pos) {
+
+        // add an extra (scale/2) because the divide rounds _down_, and we want to
+        // round _up_ or _down_, depending on which is closer.
+        pos->x = (int)(pos->x - stroke_minx + scale / 2) / scale;
+        pos->y = (int)(pos->y - stroke_miny + scale / 2) / scale;
+
+        // now, get the integer representing this position and add it to the stroke sequence
+        int n = 3 * pos->y + pos->x + 1;
+        int index = sequence.size() - 1;
+        n += '0';
+        if (index == -1)
+            sequence += n;
+        else if (n != sequence[index])
+            sequence += n;
+    }
 }
 
 int MTStroke::max(int n, int m)
 {
-  if (n>m)
-    return n;
-  return m;
+    if (n > m)
+        return n;
+    return m;
 }
 
 
@@ -164,125 +165,125 @@ int MTStroke::max(int n, int m)
  */
 void MTStroke::getExtent()
 {
-  stroke_minx = UpperRight.x;
-  stroke_maxx = 0;
-  stroke_miny = LowerLeft.y;
-  stroke_maxy = 0;
-
-  std::vector<Pt>::iterator pos;
-  for (pos=points.begin(); pos<points.end(); ++pos) {
-    if (stroke_minx > pos->x)
-      stroke_minx   =  pos->x;
-    if (stroke_maxx < pos->x)
-      stroke_maxx   =  pos->x;
-    if (stroke_miny > pos->y)
-      stroke_miny   = pos->y;
-    if (stroke_maxy < pos->y)
-      stroke_maxy   = pos->y;
-  }
+    stroke_minx = UpperRight.x;
+    stroke_maxx = 0;
+    stroke_miny = LowerLeft.y;
+    stroke_maxy = 0;
+
+    std::vector<Pt>::iterator pos;
+    for (pos = points.begin(); pos < points.end(); ++pos) {
+        if (stroke_minx > pos->x)
+            stroke_minx   =  pos->x;
+        if (stroke_maxx < pos->x)
+            stroke_maxx   =  pos->x;
+        if (stroke_miny > pos->y)
+            stroke_miny   = pos->y;
+        if (stroke_maxy < pos->y)
+            stroke_maxy   = pos->y;
+    }
 }
 
 // test if strokefile exists; if not, create it from defaults.
 // if unable to create it,
 bool MTStroke::readSequence()
 {
-  QString strokefilename;
-  strokefilename = KStandardDirs::locate("config", QLatin1String( "kmousetool_strokes.txt" ) );
-  if (strokefilename.isEmpty()) {
-    // make default
-    if (sequenceMap.size()==0)
-      makeDefaultSequenceMap();
-    writeSequence();
-    return false;
-  }
-  ifstream infile (strokefilename.toAscii().constData());
-  if (!infile) {
-    // make default
-    if (sequenceMap.size()==0)
-      makeDefaultSequenceMap();
-    writeSequence();
-    return false;
-  }
-
-  while (!infile.eof()) {
-    string str;
-    infile >> str;
-    if (str[0] == '#')
-      readToEndOfLine(infile);
-    else {
-      // get the associated action
-      string str2;
-      infile >> str2;
-      int n = str2[0] - '0';    // the action is a single integer digit; convert it to an int
-      sequenceMap[ string(str) ] = n;
+    QString strokefilename;
+    strokefilename = KStandardDirs::locate("config", QLatin1String("kmousetool_strokes.txt"));
+    if (strokefilename.isEmpty()) {
+        // make default
+        if (sequenceMap.size() == 0)
+            makeDefaultSequenceMap();
+        writeSequence();
+        return false;
+    }
+    ifstream infile(strokefilename.toAscii().constData());
+    if (!infile) {
+        // make default
+        if (sequenceMap.size() == 0)
+            makeDefaultSequenceMap();
+        writeSequence();
+        return false;
+    }
+
+    while (!infile.eof()) {
+        string str;
+        infile >> str;
+        if (str[0] == '#')
+            readToEndOfLine(infile);
+        else {
+            // get the associated action
+            string str2;
+            infile >> str2;
+            int n = str2[0] - '0';    // the action is a single integer digit; convert it to an int
+            sequenceMap[ string(str) ] = n;
+        }
     }
-  }
-  return true;
+    return true;
 }
 
 bool MTStroke::writeSequence()
 {
-  QString strokefilename;
-  strokefilename = KStandardDirs::locateLocal("config", QLatin1String( "kmousetool_strokes.txt" ));
+    QString strokefilename;
+    strokefilename = KStandardDirs::locateLocal("config", QLatin1String("kmousetool_strokes.txt"));
 
-  ofstream outfile (strokefilename.toAscii(), ios::out);
-  if (!outfile) {
-    return false;
-  }
-
-  outfile << "# This file contains definitions for valid strokes for KMouseTool\n";
-  outfile << "# To make sense of the numbers: \n";
-  outfile << "# The mouse path begins and ends when the mouse is paused.\n";
-  outfile << "# Imagine a square enclosing the path.\n";
-  outfile << "# Divide the square into 9 boxes, and number them like so:\n";
-  outfile << "# 1 2 3\n";
-  outfile << "# 4 5 6\n";
-  outfile << "# 7 8 9\n";
-  outfile << "# \n";
-  outfile << "# The mouse path can then be described by a sequence of numbers:\n";
-  outfile << "# for example, \"12321\" describes the mouse moving from left to right and back.\n";
-  outfile << "# This general scheme follows libstroke (http://www.etla.net/~willey/projects/libstroke/)\n";
-  outfile << "# although it was reimplemented from scratch for KMouseTool.\n";
-  outfile << "\n";
-  outfile << "# For each stroke recognized, provide an integer describing an action\n";
-  outfile << "# KMouseTool can take.  At the moment, valid actions are:\n";
-  outfile << "# -1     Do not click\n";
-  outfile << "#  1     Normal click (use Smart Drag if that's enabled)\n";
-  outfile << "#  2     Right  click\n";
-  outfile << "#  3     Double click\n";
-  outfile << "\n";
-  outfile << "#Stroke\tAction\n";
-  std::map<std::string, int>::iterator pos = sequenceMap.begin();
-  while (pos != sequenceMap.end()) {
-    outfile << pos->first << "\t" << pos->second << "\n";
-    pos++;
-  }
-  return true;
+    ofstream outfile(strokefilename.toAscii(), ios::out);
+    if (!outfile) {
+        return false;
+    }
+
+    outfile << "# This file contains definitions for valid strokes for KMouseTool\n";
+    outfile << "# To make sense of the numbers: \n";
+    outfile << "# The mouse path begins and ends when the mouse is paused.\n";
+    outfile << "# Imagine a square enclosing the path.\n";
+    outfile << "# Divide the square into 9 boxes, and number them like so:\n";
+    outfile << "# 1 2 3\n";
+    outfile << "# 4 5 6\n";
+    outfile << "# 7 8 9\n";
+    outfile << "# \n";
+    outfile << "# The mouse path can then be described by a sequence of numbers:\n";
+    outfile << "# for example, \"12321\" describes the mouse moving from left to right and back.\n";
+    outfile << "# This general scheme follows libstroke (http://www.etla.net/~willey/projects/libstroke/)\n";
+    outfile << "# although it was reimplemented from scratch for KMouseTool.\n";
+    outfile << "\n";
+    outfile << "# For each stroke recognized, provide an integer describing an action\n";
+    outfile << "# KMouseTool can take.  At the moment, valid actions are:\n";
+    outfile << "# -1     Do not click\n";
+    outfile << "#  1     Normal click (use Smart Drag if that's enabled)\n";
+    outfile << "#  2     Right  click\n";
+    outfile << "#  3     Double click\n";
+    outfile << "\n";
+    outfile << "#Stroke\tAction\n";
+    std::map<std::string, int>::iterator pos = sequenceMap.begin();
+    while (pos != sequenceMap.end()) {
+        outfile << pos->first << "\t" << pos->second << "\n";
+        pos++;
+    }
+    return true;
 }
 
 void MTStroke::makeDefaultSequenceMap()
 {
-  sequenceMap[ string("12321") ] = RightClick;
-  sequenceMap[ string("1321") ]  = RightClick;
-  sequenceMap[ string("1231") ]  = RightClick;
-  sequenceMap[ string("131") ]   = RightClick;
-
-  sequenceMap[ string("32123") ] = DoubleClick;
-  sequenceMap[ string("3213") ]  = DoubleClick;
-  sequenceMap[ string("3123") ]  = DoubleClick;
-  sequenceMap[ string("313") ]   = DoubleClick;
-/*
-  sequenceMap[ string("") ] = ;
-  sequenceMap[ string("") ] = ;
-  sequenceMap[ string("") ] = ;
-  sequenceMap[ string("") ] = ;
-  sequenceMap[ string("") ] = ;
-*/
+    sequenceMap[ string("12321") ] = RightClick;
+    sequenceMap[ string("1321") ]  = RightClick;
+    sequenceMap[ string("1231") ]  = RightClick;
+    sequenceMap[ string("131") ]   = RightClick;
+
+    sequenceMap[ string("32123") ] = DoubleClick;
+    sequenceMap[ string("3213") ]  = DoubleClick;
+    sequenceMap[ string("3123") ]  = DoubleClick;
+    sequenceMap[ string("313") ]   = DoubleClick;
+    /*
+      sequenceMap[ string("") ] = ;
+      sequenceMap[ string("") ] = ;
+      sequenceMap[ string("") ] = ;
+      sequenceMap[ string("") ] = ;
+      sequenceMap[ string("") ] = ;
+    */
 }
 
 void MTStroke::readToEndOfLine(ifstream &infile)
 {
-  char ch = 'a';
-  while (ch != '\n')
-    infile.get(ch);
+    char ch = 'a';
+    while (ch != '\n')
+        infile.get(ch);
 }
diff --git a/kmousetool/mtstroke.h b/kmousetool/mtstroke.h
index f8a7563..d673ce4 100644
--- a/kmousetool/mtstroke.h
+++ b/kmousetool/mtstroke.h
@@ -30,75 +30,99 @@
   *@author Jeff Roush
   */
 
-class Pt {
+class Pt
+{
 
-  public:
-  int x,y;
-  Pt () { } 
-  Pt (const int xx, const int yy) { x=xx; y=yy; }
-  bool sameAs(Pt pt) { return (x==pt.x&&y==pt.y); }
-  bool nearTo(Pt pt, int delta) { return ( (std::abs(x-pt.x)<delta) && (std::abs(y-pt.y)<delta) ); }
+public:
+    int x, y;
+    Pt() { }
+    Pt(const int xx, const int yy) {
+        x = xx;
+        y = yy;
+    }
+    bool sameAs(Pt pt) {
+        return (x == pt.x && y == pt.y);
+    }
+    bool nearTo(Pt pt, int delta) {
+        return ((std::abs(x - pt.x) < delta) && (std::abs(y - pt.y) < delta));
+    }
 
-  void dump();
+    void dump();
 };
 
-class MTStroke {
-  std::vector<Pt>  points;
+class MTStroke
+{
+    std::vector<Pt>  points;
 //  std::vector<int> sequence;
-  std::string sequence;
-  std::map<std::string, int> sequenceMap;
-  
-  int stroke_minx;
-  int stroke_maxx;
-  int stroke_miny;
-  int stroke_maxy;
-
-  void makeDefaultSequenceMap();
-  
+    std::string sequence;
+    std::map<std::string, int> sequenceMap;
+
+    int stroke_minx;
+    int stroke_maxx;
+    int stroke_miny;
+    int stroke_maxy;
+
+    void makeDefaultSequenceMap();
+
 public:
-  // stroke types
-  static const int bumped_mouse;
-  static const int normal;
-  static const int RightClick;
-  static const int DoubleClick;
-  static const int circle;
-  static const int DontClick;
-  static const int LowerLeftStroke;
-  static const int UpperRightStroke;
-  static const int LowerRightStroke;
-  static const int UpperLeftStroke;
-
-  // Static ints
-  static int delta_xy;
-  static Pt LowerLeft;
-  static Pt LowerRight;
-  static Pt UpperLeft;
-  static Pt UpperRight;
-
-  // min points before it can be considered a "stroke"  
-  static const int min_num_points;
-
-  static void setLowerLeft (int x, int y) { LowerLeft.x  = x;  LowerLeft.y  = y; }
-  static void setLowerRight(int x, int y) { LowerRight.x = x;  LowerRight.y = y; }
-  static void setUpperLeft (int x, int y) { UpperLeft.x  = x;  UpperLeft.y  = y; }
-  static void setUpperRight(int x, int y) { UpperRight.x = x;  UpperRight.y = y; }
-  
-  void dump();
-  void scale();
-  void addPt(int, int);
-  int  max(int, int);
-  bool pointsContain(Pt pt);
-  int  getStrokeType();
-  void getExtent();
+    // stroke types
+    static const int bumped_mouse;
+    static const int normal;
+    static const int RightClick;
+    static const int DoubleClick;
+    static const int circle;
+    static const int DontClick;
+    static const int LowerLeftStroke;
+    static const int UpperRightStroke;
+    static const int LowerRightStroke;
+    static const int UpperLeftStroke;
+
+    // Static ints
+    static int delta_xy;
+    static Pt LowerLeft;
+    static Pt LowerRight;
+    static Pt UpperLeft;
+    static Pt UpperRight;
+
+    // min points before it can be considered a "stroke"
+    static const int min_num_points;
+
+    static void setLowerLeft(int x, int y) {
+        LowerLeft.x  = x;
+        LowerLeft.y  = y;
+    }
+    static void setLowerRight(int x, int y) {
+        LowerRight.x = x;
+        LowerRight.y = y;
+    }
+    static void setUpperLeft(int x, int y) {
+        UpperLeft.x  = x;
+        UpperLeft.y  = y;
+    }
+    static void setUpperRight(int x, int y) {
+        UpperRight.x = x;
+        UpperRight.y = y;
+    }
+
+    void dump();
+    void scale();
+    void addPt(int, int);
+    int  max(int, int);
+    bool pointsContain(Pt pt);
+    int  getStrokeType();
+    void getExtent();
 //  void getSequence();
-  bool readSequence();
-  bool writeSequence();
-  void readToEndOfLine(std::ifstream &infile);
-
-  void reset() { points.clear(); sequence = ""; }
-  
-	MTStroke();
-	~MTStroke();
+    bool readSequence();
+    bool writeSequence();
+    void readToEndOfLine(std::ifstream &infile);
+
+    void reset() {
+        points.clear();
+        sequence = "";
+    }
+
+    MTStroke();
+    ~MTStroke();
 };
 
 #endif
